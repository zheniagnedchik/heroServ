const { DocumentStore } = require("ravendb");
const bcrypt = require("bcrypt");
const jwt = require("node-jsonwebtoken");
const User = require("../models/user");
const ffmpeg = require("fluent-ffmpeg");
const multer = require("multer");
const store = new DocumentStore("http://64.226.88.96:8080", "Users");
store.initialize();
const path = require("path");
const axios = require("axios");
const products = [
  {
    title: "Абрикосы",
    P: 0.01,
    F: 0.0,
    CR: 0.1,
    C: 0.45,
  },
  {
    title: "Авокадо",
    P: 0.02,
    F: 0.19,
    CR: 0.07,
    C: 1.97,
  },
  {
    title: "Аджика",
    P: 0.02,
    F: 0.03,
    CR: 0.08,
    C: 0.59,
  },
  {
    title: "Айва",
    P: 0.01,
    F: 0.0,
    CR: 0.09,
    C: 0.41,
  },
  {
    title: "Айсберг",
    P: 0.01,
    F: 0.0,
    CR: 0.02,
    C: 0.17,
  },
  {
    title: "Активиа кефирная 1%",
    P: 0.03,
    F: 0.01,
    CR: 0.04,
    C: 0.39,
  },
  {
    title: "Ананас",
    P: 0.0,
    F: 0.0,
    CR: 0.12,
    C: 0.5,
  },
  {
    title: "Ананас консервированный",
    P: 0.0,
    F: 0.0,
    CR: 0.16,
    C: 0.65,
  },
  {
    title: "Ананас цукаты",
    P: 0.01,
    F: 0.02,
    CR: 0.15,
    C: 0.78,
  },
  {
    title: "Апельсин",
    P: 0.02,
    F: 0.0,
    CR: 0.09,
    C: 0.43,
  },
  {
    title: "Апельсиновый сок",
    P: 0.0,
    F: 0.0,
    CR: 0.11,
    C: 0.44,
  },
  {
    title: "Арахис",
    P: 0.25,
    F: 0.46,
    CR: 0.13,
    C: 5.61,
  },
  {
    title: "Арахис в сахаре",
    P: 0.18,
    F: 0.3,
    CR: 0.51,
    C: 5.35,
  },
  {
    title: "Базилик свежий",
    P: 0.03,
    F: 0.01,
    CR: 0.04,
    C: 0.27,
  },
  {
    title: "Баклажаны",
    P: 0.01,
    F: 0.0,
    CR: 0.06,
    C: 0.27,
  },
  {
    title: "Банан",
    P: 0.03,
    F: 0.03,
    CR: 0.22,
    C: 0.97,
  },
  {
    title: "Баранина вареная",
    P: 0.24,
    F: 0.21,
    CR: 0.0,
    C: 2.86,
  },
  {
    title: "Батон",
    P: 0.08,
    F: 0.03,
    CR: 0.49,
    C: 2.64,
  },
  {
    title: "Бедро индейки",
    P: 0.16,
    F: 0.09,
    CR: 0.01,
    C: 1.43,
  },
  {
    title: "Бекон",
    P: 0.15,
    F: 0.45,
    CR: 0.02,
    C: 4.69,
  },
  {
    title: "Блины обычные",
    P: 0.06,
    F: 0.06,
    CR: 0.25,
    C: 1.78,
  },
  {
    title: "Борщ лёгкий",
    P: 0.03,
    F: 0.02,
    CR: 0.09,
    C: 0.58,
  },
  {
    title: "Брокколи",
    P: 0.04,
    F: 0.01,
    CR: 0.04,
    C: 0.33,
  },
  {
    title: "Брусника",
    P: 0.01,
    F: 0.0,
    CR: 0.09,
    C: 0.42,
  },
  {
    title: "Бульон из говядины",
    P: 0.06,
    F: 0.04,
    CR: 0.0,
    C: 0.57,
  },
  {
    title: "Бульон из куриной грудки",
    P: 0.07,
    F: 0.01,
    CR: 0.0,
    C: 0.42,
  },
  {
    title: "Бульон куриный",
    P: 0.03,
    F: 0.02,
    CR: 0.01,
    C: 0.33,
  },
  {
    title: "Вареная говядина",
    P: 0.23,
    F: 0.16,
    CR: 0.0,
    C: 2.36,
  },
  {
    title: "Вареная колбаса",
    P: 0.12,
    F: 0.22,
    CR: 0.01,
    C: 2.53,
  },
  {
    title: "Вареная куриная грудка",
    P: 0.27,
    F: 0.06,
    CR: 0.01,
    C: 1.38,
  },
  {
    title: "Вареная курица",
    P: 0.19,
    F: 0.09,
    CR: 0.0,
    C: 1.5,
  },
  {
    title: "Вареная морковь",
    P: 0.01,
    F: 0.0,
    CR: 0.06,
    C: 0.31,
  },
  {
    title: "Вареная чечевица",
    P: 0.08,
    F: 0.0,
    CR: 0.2,
    C: 1.11,
  },
  {
    title: "Варёная сгущёнка",
    P: 0.07,
    F: 0.09,
    CR: 0.55,
    C: 3.26,
  },
  {
    title: "Вермишель",
    P: 0.11,
    F: 0.01,
    CR: 0.72,
    C: 3.47,
  },
  {
    title: "Ветчина",
    P: 0.16,
    F: 0.19,
    CR: 0.02,
    C: 2.46,
  },
  {
    title: "Вино белое сухое",
    P: 0.0,
    F: 0.0,
    CR: 0.0,
    C: 0.67,
  },
  {
    title: "Виноград",
    P: 0.01,
    F: 0.01,
    CR: 0.16,
    C: 0.69,
  },
  {
    title: "Вино красное сухое",
    P: 0.0,
    F: 0.0,
    CR: 0.01,
    C: 0.7,
  },
  {
    title: "Вишня",
    P: 0.01,
    F: 0.0,
    CR: 0.11,
    C: 0.54,
  },
  {
    title: "Геркулес",
    P: 0.12,
    F: 0.06,
    CR: 0.56,
    C: 3.27,
  },
  {
    title: "Говядина",
    P: 0.2,
    F: 0.13,
    CR: 0.0,
    C: 1.92,
  },
  {
    title: "Говяжья печень",
    P: 0.17,
    F: 0.03,
    CR: 0.03,
    C: 1.1,
  },
  {
    title: "Голень куриная",
    P: 0.2,
    F: 0.09,
    CR: 0.0,
    C: 1.68,
  },
  {
    title: "Голландский сыр",
    P: 0.24,
    F: 0.3,
    CR: 0.0,
    C: 3.73,
  },
  {
    title: "Голубика",
    P: 0.01,
    F: 0.01,
    CR: 0.09,
    C: 0.46,
  },
  {
    title: "Горбуша",
    P: 0.21,
    F: 0.07,
    CR: 0.0,
    C: 1.43,
  },
  {
    title: "Горох",
    P: 0.19,
    F: 0.03,
    CR: 0.42,
    C: 2.56,
  },
  {
    title: "Гороховое пюре",
    P: 0.08,
    F: 0.01,
    CR: 0.23,
    C: 1.06,
  },
  {
    title: "Горошек зеленый",
    P: 0.04,
    F: 0.0,
    CR: 0.1,
    C: 0.59,
  },
  {
    title: "Горчица",
    P: 0.08,
    F: 0.11,
    CR: 0.13,
    C: 1.84,
  },
  {
    title: "Гранат",
    P: 0.02,
    F: 0.01,
    CR: 0.14,
    C: 0.67,
  },
  {
    title: "Грейпфрут",
    P: 0.01,
    F: 0.0,
    CR: 0.09,
    C: 0.41,
  },
  {
    title: "Грецкие орехи",
    P: 0.15,
    F: 0.65,
    CR: 0.14,
    C: 6.97,
  },
  {
    title: "Гречневая каша рассыпчатая",
    P: 0.05,
    F: 0.01,
    CR: 0.24,
    C: 1.31,
  },
  {
    title: "Гречневая крупа",
    P: 0.12,
    F: 0.04,
    CR: 0.63,
    C: 3.29,
  },
  {
    title: "Грибы белые",
    P: 0.09,
    F: 0.02,
    CR: 0.03,
    C: 0.28,
  },
  {
    title: "Грибы белые сушеные",
    P: 0.27,
    F: 0.07,
    CR: 0.16,
    C: 2.39,
  },
  {
    title: "Грибы грузди",
    P: 0.02,
    F: 0.01,
    CR: 0.01,
    C: 0.16,
  },
  {
    title: "Грибы лисички",
    P: 0.02,
    F: 0.01,
    CR: 0.01,
    C: 0.2,
  },
  {
    title: "Грибы маслята",
    P: 0.02,
    F: 0.01,
    CR: 0.01,
    C: 0.09,
  },
  {
    title: "Грибы опята",
    P: 0.02,
    F: 0.01,
    CR: 0.01,
    C: 0.17,
  },
  {
    title: "Грибы подберёзовики свежие",
    P: 0.02,
    F: 0.01,
    CR: 0.04,
    C: 0.17,
  },
  {
    title: "Грибы подосиновики свежие",
    P: 0.03,
    F: 0.01,
    CR: 0.03,
    C: 0.26,
  },
  {
    title: "Грибы рыжики",
    P: 0.02,
    F: 0.01,
    CR: 0.01,
    C: 0.17,
  },
  {
    title: "Грибы шампиньоны",
    P: 0.04,
    F: 0.01,
    CR: 0.0,
    C: 0.22,
  },
  {
    title: "Груша",
    P: 0.01,
    F: 0.0,
    CR: 0.12,
    C: 0.51,
  },
  {
    title: "Груша (сухофрукты)",
    P: 0.02,
    F: 0.0,
    CR: 0.62,
    C: 2.46,
  },
  {
    title: "Дайкон",
    P: 0.01,
    F: 0.0,
    CR: 0.04,
    C: 0.21,
  },
  {
    title: "Джем мандариновый",
    P: 0.0,
    F: 0.0,
    CR: 0.72,
    C: 2.76,
  },
  {
    title: "Дрожжи",
    P: 0.29,
    F: 0.03,
    CR: 0.23,
    C: 2.63,
  },
  {
    title: "Дрожжи сухие",
    P: 0.49,
    F: 0.06,
    CR: 0.4,
    C: 4.1,
  },
  {
    title: "Дыня",
    P: 0.01,
    F: 0.0,
    CR: 0.08,
    C: 0.35,
  },
  {
    title: "Ежевика",
    P: 0.02,
    F: 0.0,
    CR: 0.05,
    C: 0.31,
  },
  {
    title: "Жареное яйцо",
    P: 0.14,
    F: 0.14,
    CR: 0.01,
    C: 1.83,
  },
  {
    title: "Желатин",
    P: 0.86,
    F: 0.0,
    CR: 0.01,
    C: 3.43,
  },
  {
    title: "Зеленая фасоль",
    P: 0.03,
    F: 0.0,
    CR: 0.04,
    C: 0.3,
  },
  {
    title: "Зеленый лук",
    P: 0.01,
    F: 0.0,
    CR: 0.04,
    C: 0.19,
  },
  {
    title: "Зелень петрушки",
    P: 0.04,
    F: 0.0,
    CR: 0.08,
    C: 0.5,
  },
  {
    title: 'Зелёный горошек "Бондюэль"',
    P: 0.05,
    F: 0.0,
    CR: 0.08,
    C: 0.6,
  },
  {
    title: 'Зелёный горошек "Фрау Марта"',
    P: 0.03,
    F: 0.0,
    CR: 0.07,
    C: 0.4,
  },
  {
    title: "Земляника",
    P: 0.01,
    F: 0.0,
    CR: 0.09,
    C: 0.38,
  },
  {
    title: "Зефир бело-розовый",
    P: 0.01,
    F: 0.0,
    CR: 0.8,
    C: 3.04,
  },
  {
    title: "Изюм",
    P: 0.02,
    F: 0.0,
    CR: 0.68,
    C: 2.8,
  },
  {
    title: "Имбирь свежий",
    P: 0.02,
    F: 0.01,
    CR: 0.16,
    C: 0.72,
  },
  {
    title: "Индейка (грудка)",
    P: 0.19,
    F: 0.02,
    CR: 0.0,
    C: 0.94,
  },
  {
    title: "Индейка (филе)",
    P: 0.2,
    F: 0.12,
    CR: 0.0,
    C: 1.88,
  },
  {
    title: "Инжир (сухофрукты)",
    P: 0.03,
    F: 0.01,
    CR: 0.57,
    C: 2.39,
  },
  {
    title: "Йогурт Активия",
    P: 0.04,
    F: 0.03,
    CR: 0.11,
    C: 0.97,
  },
  {
    title: "Кабачки жареные",
    P: 0.01,
    F: 0.06,
    CR: 0.07,
    C: 0.91,
  },
  {
    title: "Кабачки цукини",
    P: 0.02,
    F: 0.0,
    CR: 0.03,
    C: 0.16,
  },
  {
    title: "Кабачковая икра",
    P: 0.01,
    F: 0.06,
    CR: 0.07,
    C: 0.9,
  },
  {
    title: "Кабачок",
    P: 0.01,
    F: 0.01,
    CR: 0.05,
    C: 0.28,
  },
  {
    title: "Какао",
    P: 0.14,
    F: 0.09,
    CR: 0.26,
    C: 2.34,
  },
  {
    title: "Какао порошок",
    P: 0.23,
    F: 0.15,
    CR: 0.29,
    C: 3.26,
  },
  {
    title: "Кальмар",
    P: 0.18,
    F: 0.02,
    CR: 0.01,
    C: 0.97,
  },
  {
    title: "Кальмар вареный",
    P: 0.18,
    F: 0.03,
    CR: 0.01,
    C: 1.03,
  },
  {
    title: "Каперсы",
    P: 0.02,
    F: 0.01,
    CR: 0.04,
    C: 0.21,
  },
  {
    title: "Капуста белокочаная",
    P: 0.02,
    F: 0.0,
    CR: 0.05,
    C: 0.28,
  },
  {
    title: "Капуста белокочанная",
    P: 0.02,
    F: 0.0,
    CR: 0.06,
    C: 0.29,
  },
  {
    title: "Капуста брокколи замороженая",
    P: 0.02,
    F: 0.0,
    CR: 0.04,
    C: 0.21,
  },
  {
    title: "Капуста брюссельская",
    P: 0.04,
    F: 0.0,
    CR: 0.04,
    C: 0.47,
  },
  {
    title: "Капуста жареная",
    P: 0.03,
    F: 0.06,
    CR: 0.08,
    C: 0.88,
  },
  {
    title: "Капуста квашенная",
    P: 0.02,
    F: 0.0,
    CR: 0.03,
    C: 0.23,
  },
  {
    title: "Капуста китайская",
    P: 0.01,
    F: 0.0,
    CR: 0.02,
    C: 0.16,
  },
  {
    title: "Капуста кольраби",
    P: 0.03,
    F: 0.0,
    CR: 0.09,
    C: 0.42,
  },
  {
    title: "Капуста краснокочанная",
    P: 0.02,
    F: 0.0,
    CR: 0.06,
    C: 0.29,
  },
  {
    title: "Капуста морская",
    P: 0.01,
    F: 0.05,
    CR: 0.0,
    C: 0.58,
  },
  {
    title: "Капуста пекинская",
    P: 0.02,
    F: 0.0,
    CR: 0.03,
    C: 0.15,
  },
  {
    title: "Капуста цветная",
    P: 0.03,
    F: 0.0,
    CR: 0.05,
    C: 0.34,
  },
  {
    title: "Картофель",
    P: 0.02,
    F: 0.01,
    CR: 0.2,
    C: 0.84,
  },
  {
    title: "Картофель молодой",
    P: 0.02,
    F: 0.0,
    CR: 0.16,
    C: 0.61,
  },
  {
    title: "Картофельные хлопья",
    P: 0.08,
    F: 0.01,
    CR: 0.83,
    C: 3.66,
  },
  {
    title: "Картофель отварной",
    P: 0.02,
    F: 0.01,
    CR: 0.16,
    C: 0.83,
  },
  {
    title: "Картофель печеный",
    P: 0.03,
    F: 0.03,
    CR: 0.22,
    C: 1.13,
  },
  {
    title: "Картофель фри",
    P: 0.04,
    F: 0.17,
    CR: 0.4,
    C: 3.23,
  },
  {
    title: "Картошка",
    P: 0.02,
    F: 0.01,
    CR: 0.21,
    C: 1.05,
  },
  {
    title: "Каша рисовая",
    P: 0.02,
    F: 0.03,
    CR: 0.26,
    C: 1.3,
  },
  {
    title: "Квас хлебный",
    P: 0.0,
    F: 0.0,
    CR: 0.05,
    C: 0.24,
  },
  {
    title: "Кедровые орехи",
    P: 0.15,
    F: 0.63,
    CR: 0.17,
    C: 6.52,
  },
  {
    title: "Кетчуп",
    P: 0.05,
    F: 0.01,
    CR: 0.16,
    C: 0.9,
  },
  {
    title: "Кефир 1%",
    P: 0.03,
    F: 0.01,
    CR: 0.05,
    C: 0.45,
  },
  {
    title: "Кефир 2,5%",
    P: 0.03,
    F: 0.03,
    CR: 0.04,
    C: 0.52,
  },
  {
    title: "Кефир 3,2%",
    P: 0.03,
    F: 0.03,
    CR: 0.04,
    C: 0.58,
  },
  {
    title: "Кешью",
    P: 0.21,
    F: 0.48,
    CR: 0.2,
    C: 6.07,
  },
  {
    title: "Киви",
    P: 0.01,
    F: 0.01,
    CR: 0.1,
    C: 0.51,
  },
  {
    title: "Клубника",
    P: 0.01,
    F: 0.0,
    CR: 0.07,
    C: 0.32,
  },
  {
    title: "Клюква",
    P: 0.0,
    F: 0.0,
    CR: 0.09,
    C: 0.43,
  },
  {
    title: "Клюква сушеная",
    P: 0.0,
    F: 0.01,
    CR: 0.7,
    C: 3.05,
  },
  {
    title: "Козий сыр",
    P: 0.19,
    F: 0.23,
    CR: 0.02,
    C: 2.96,
  },
  {
    title: 'Колбаса вареная "докторская"',
    P: 0.13,
    F: 0.22,
    CR: 0.01,
    C: 2.54,
  },
  {
    title: "Конфеты Батончики Рот Фронт с орехами",
    P: 0.12,
    F: 0.32,
    CR: 0.49,
    C: 3.79,
  },
  {
    title: "Корень имбиря",
    P: 0.02,
    F: 0.01,
    CR: 0.18,
    C: 0.9,
  },
  {
    title: "Корень сельдерея",
    P: 0.01,
    F: 0.0,
    CR: 0.06,
    C: 0.31,
  },
  {
    title: "Коричневый сахар",
    P: 0.0,
    F: 0.0,
    CR: 0.92,
    C: 3.93,
  },
  {
    title: "Корнишоны маринованные",
    P: 0.01,
    F: 0.0,
    CR: 0.04,
    C: 0.36,
  },
  {
    title: "Котлеты полтавские",
    P: 0.26,
    F: 0.32,
    CR: 0.06,
    C: 4.15,
  },
  {
    title: "Кофе молотый Арабика",
    P: 0.12,
    F: 0.14,
    CR: 0.03,
    C: 1.93,
  },
  {
    title: "Кофе растворимый (сухой)",
    P: 0.15,
    F: 0.04,
    CR: 0.07,
    C: 1.16,
  },
  {
    title: "Кофе эспрессо крепкий",
    P: 0.01,
    F: 0.02,
    CR: 0.0,
    C: 0.19,
  },
  {
    title: 'Кофе "якобз монарх" (растворимый)',
    P: 0.15,
    F: 0.0,
    CR: 0.08,
    C: 0.97,
  },
  {
    title: "Крабовые палочки",
    P: 0.08,
    F: 0.02,
    CR: 0.1,
    C: 0.85,
  },
  {
    title: "Краковская колбаса",
    P: 0.17,
    F: 0.39,
    CR: 0.0,
    C: 4.2,
  },
  {
    title: "Красная фасоль консервированная",
    P: 0.07,
    F: 0.0,
    CR: 0.17,
    C: 0.99,
  },
  {
    title: "Крахмал картофельный",
    P: 0.0,
    F: 0.0,
    CR: 0.82,
    C: 3.35,
  },
  {
    title: "Крахмал кукурузный",
    P: 0.01,
    F: 0.0,
    CR: 0.87,
    C: 3.48,
  },
  {
    title: "Краюшка",
    P: 0.09,
    F: 0.01,
    CR: 0.43,
    C: 2.26,
  },
  {
    title: "Креветки (отварные)",
    P: 0.18,
    F: 0.02,
    CR: 0.0,
    C: 0.9,
  },
  {
    title: "Крупа гречневая",
    P: 0.12,
    F: 0.03,
    CR: 0.65,
    C: 3.26,
  },
  {
    title: "Крупа кукурузная",
    P: 0.08,
    F: 0.01,
    CR: 0.75,
    C: 3.37,
  },
  {
    title: "Крупа манная",
    P: 0.11,
    F: 0.01,
    CR: 0.7,
    C: 3.3,
  },
  {
    title: "Крупа овсяная",
    P: 0.12,
    F: 0.06,
    CR: 0.65,
    C: 3.42,
  },
  {
    title: "Крупа перловая",
    P: 0.1,
    F: 0.01,
    CR: 0.65,
    C: 3.28,
  },
  {
    title: "Крупа пшеничная",
    P: 0.12,
    F: 0.02,
    CR: 0.63,
    C: 3.22,
  },
  {
    title: "Крупа рис длиннозерный пропаренный",
    P: 0.07,
    F: 0.01,
    CR: 0.74,
    C: 3.33,
  },
  {
    title: "Крупа рисовая",
    P: 0.07,
    F: 0.11,
    CR: 0.63,
    C: 3.3,
  },
  {
    title: "Крупа ячневая",
    P: 0.1,
    F: 0.01,
    CR: 0.59,
    C: 3.18,
  },
  {
    title: "Крыжовник",
    P: 0.01,
    F: 0.0,
    CR: 0.1,
    C: 0.41,
  },
  {
    title: "Кукуруза консервированная",
    P: 0.03,
    F: 0.02,
    CR: 0.17,
    C: 0.87,
  },
  {
    title: "Кукурузные хлопья",
    P: 0.06,
    F: 0.03,
    CR: 0.73,
    C: 3.53,
  },
  {
    title: "Кунжут",
    P: 0.2,
    F: 0.5,
    CR: 0.11,
    C: 5.62,
  },
  {
    title: "Курага",
    P: 0.05,
    F: 0.0,
    CR: 0.54,
    C: 2.32,
  },
  {
    title: "Куриная печень",
    P: 0.19,
    F: 0.07,
    CR: 0.01,
    C: 1.4,
  },
  {
    title: "Куриные грудки",
    P: 0.23,
    F: 0.06,
    CR: 0.03,
    C: 1.44,
  },
  {
    title: "Куриные окорочка",
    P: 0.18,
    F: 0.11,
    CR: 0.0,
    C: 1.7,
  },
  {
    title: "Курица",
    P: 0.21,
    F: 0.11,
    CR: 0.01,
    C: 1.86,
  },
  {
    title: "Кус-Кус (крупа)",
    P: 0.13,
    F: 0.01,
    CR: 0.77,
    C: 3.73,
  },
  {
    title: "Лаваш грузинский",
    P: 0.08,
    F: 0.02,
    CR: 0.53,
    C: 2.69,
  },
  {
    title: "Лайм",
    P: 0.01,
    F: 0.0,
    CR: 0.04,
    C: 0.2,
  },
  {
    title: "Лапша гречневая",
    P: 0.15,
    F: 0.01,
    CR: 0.71,
    C: 3.48,
  },
  {
    title: "Лапша рисовая",
    P: 0.05,
    F: 0.01,
    CR: 0.81,
    C: 3.5,
  },
  {
    title: "Лапша яичная",
    P: 0.1,
    F: 0.02,
    CR: 0.64,
    C: 3.3,
  },
  {
    title: "Лимон",
    P: 0.01,
    F: 0.0,
    CR: 0.04,
    C: 0.27,
  },
  {
    title: "Лимонный сок",
    P: 0.01,
    F: 0.0,
    CR: 0.04,
    C: 0.2,
  },
  {
    title: "Лосось",
    P: 0.21,
    F: 0.1,
    CR: 0.01,
    C: 1.72,
  },
  {
    title: "Лук",
    P: 0.01,
    F: 0.0,
    CR: 0.09,
    C: 0.4,
  },
  {
    title: "Лук зелёный перо",
    P: 0.01,
    F: 0.0,
    CR: 0.05,
    C: 0.16,
  },
  {
    title: "Лук красный салатный",
    P: 0.01,
    F: 0.0,
    CR: 0.09,
    C: 0.42,
  },
  {
    title: "Льняное масло",
    P: 0.01,
    F: 0.92,
    CR: 0.04,
    C: 8.49,
  },
  {
    title: "Майонез",
    P: 0.02,
    F: 0.57,
    CR: 0.04,
    C: 5.5,
  },
  {
    title: "Майонез 15%",
    P: 0.0,
    F: 0.15,
    CR: 0.05,
    C: 1.56,
  },
  {
    title: "Майонез провансаль 67%",
    P: 0.03,
    F: 3.69,
    CR: 0.25,
    C: 6.19,
  },
  {
    title: "Мак",
    P: 0.17,
    F: 0.46,
    CR: 0.08,
    C: 5.19,
  },
  {
    title: "Макаронные изделия",
    P: 0.1,
    F: 0.0,
    CR: 0.72,
    C: 3.44,
  },
  {
    title: "Макароны отварные",
    P: 0.04,
    F: 0.01,
    CR: 0.23,
    C: 1.19,
  },
  {
    title: "Малина",
    P: 0.04,
    F: 0.0,
    CR: 0.09,
    C: 0.41,
  },
  {
    title: "Манго",
    P: 0.01,
    F: 0.0,
    CR: 0.13,
    C: 0.62,
  },
  {
    title: "Манго цукаты",
    P: 0.0,
    F: 0.0,
    CR: 0.6,
    C: 2.78,
  },
  {
    title: "Мандарин",
    P: 0.01,
    F: 0.01,
    CR: 0.09,
    C: 0.4,
  },
  {
    title: "Манная крупа",
    P: 0.11,
    F: 0.01,
    CR: 0.68,
    C: 3.34,
  },
  {
    title: "Маргарин молочный",
    P: 0.0,
    F: 0.82,
    CR: 0.06,
    C: 7.45,
  },
  {
    title: "Маргарин солнечный",
    P: 0.0,
    F: 0.72,
    CR: 0.0,
    C: 6.53,
  },
  {
    title: "Мармелад",
    P: 0.01,
    F: 0.0,
    CR: 0.75,
    C: 3.02,
  },
  {
    title: "Маслины",
    P: 0.01,
    F: 0.14,
    CR: 0.1,
    C: 1.67,
  },
  {
    title: "Маслины без косточки",
    P: 0.01,
    F: 0.13,
    CR: 0.02,
    C: 1.33,
  },
  {
    title: "Масло кукурузное",
    P: 0.01,
    F: 1.01,
    CR: 0.0,
    C: 9.16,
  },
  {
    title: "Масло льняное",
    P: 0.0,
    F: 0.96,
    CR: 0.0,
    C: 8.95,
  },
  {
    title: "Масло оливковое",
    P: 0.01,
    F: 0.91,
    CR: 0.03,
    C: 8.51,
  },
  {
    title: "Масло подсолнечное",
    P: 0.0,
    F: 0.96,
    CR: 0.0,
    C: 8.64,
  },
  {
    title: "Масло растительное",
    P: 0.02,
    F: 0.97,
    CR: 0.0,
    C: 8.97,
  },
  {
    title: "Масло сливочное",
    P: 0.01,
    F: 0.74,
    CR: 0.01,
    C: 6.74,
  },
  {
    title: "Масло топленое",
    P: 0.0,
    F: 0.86,
    CR: 0.0,
    C: 8.9,
  },
  {
    title: "Мед",
    P: 0.01,
    F: 0.0,
    CR: 0.8,
    C: 3.15,
  },
  {
    title: "Миндаль",
    P: 0.18,
    F: 0.51,
    CR: 0.16,
    C: 6.01,
  },
  {
    title: "Молоко",
    P: 0.07,
    F: 0.03,
    CR: 0.07,
    C: 0.66,
  },
  {
    title: "Молоко 0,5%",
    P: 0.02,
    F: 0.01,
    CR: 0.03,
    C: 0.35,
  },
  {
    title: "Молоко 1,5%",
    P: 0.03,
    F: 0.02,
    CR: 0.05,
    C: 0.44,
  },
  {
    title: "Молоко 2,5%",
    P: 0.03,
    F: 0.03,
    CR: 0.07,
    C: 0.64,
  },
  {
    title: "Молоко 3,2%",
    P: 0.03,
    F: 0.03,
    CR: 0.08,
    C: 0.67,
  },
  {
    title: "Молоко сгущёное",
    P: 0.07,
    F: 0.09,
    CR: 0.56,
    C: 3.17,
  },
  {
    title: "Молоко сухое",
    P: 0.31,
    F: 0.22,
    CR: 0.36,
    C: 4.46,
  },
  {
    title: "Морковь отварная",
    P: 0.01,
    F: 0.0,
    CR: 0.07,
    C: 0.32,
  },
  {
    title: "Морковь печеная",
    P: 0.01,
    F: 0.0,
    CR: 0.07,
    C: 0.31,
  },
  {
    title: "Морковь свежая",
    P: 0.01,
    F: 0.0,
    CR: 0.08,
    C: 0.35,
  },
  {
    title: "Мороженое Пломбир",
    P: 0.04,
    F: 0.15,
    CR: 0.24,
    C: 2.45,
  },
  {
    title: "Морская капуста",
    P: 0.01,
    F: 0.02,
    CR: 0.02,
    C: 0.37,
  },
  {
    title: "Мука кукурузная",
    P: 0.09,
    F: 0.03,
    CR: 0.65,
    C: 3.33,
  },
  {
    title: "Мука пшеничная в/с",
    P: 0.1,
    F: 0.01,
    CR: 0.71,
    C: 3.32,
  },
  {
    title: "Мука ржаная",
    P: 0.08,
    F: 0.02,
    CR: 0.65,
    C: 3.07,
  },
  {
    title: "Мюстли с фруктами",
    P: 0.08,
    F: 0.02,
    CR: 0.68,
    C: 3.14,
  },
  {
    title: "Мясо свинина",
    P: 0.26,
    F: 0.29,
    CR: 0.07,
    C: 2.93,
  },
  {
    title: "Мясо свинина постная",
    P: 0.18,
    F: 0.08,
    CR: 0.0,
    C: 1.51,
  },
  {
    title: "Нектарин",
    P: 0.01,
    F: 0.0,
    CR: 0.11,
    C: 0.47,
  },
  {
    title: "Облепиха",
    P: 0.01,
    F: 0.02,
    CR: 0.06,
    C: 0.47,
  },
  {
    title: "Овощная смесь “Весенние овощи”",
    P: 0.03,
    F: 0.0,
    CR: 0.04,
    C: 0.3,
  },
  {
    title: "Овсяная мука",
    P: 0.13,
    F: 0.07,
    CR: 0.65,
    C: 3.68,
  },
  {
    title: "Овсянка",
    P: 0.09,
    F: 0.05,
    CR: 0.46,
    C: 2.71,
  },
  {
    title: 'Овсянные хлопья "геркулес"',
    P: 0.11,
    F: 0.06,
    CR: 0.51,
    C: 3.05,
  },
  {
    title: "Огурцы",
    P: 0.01,
    F: 0.0,
    CR: 0.04,
    C: 0.19,
  },
  {
    title: "Огурцы грунтовые",
    P: 0.01,
    F: 0.0,
    CR: 0.03,
    C: 0.14,
  },
  {
    title: "Огурцы маринованные",
    P: 0.02,
    F: 0.0,
    CR: 0.02,
    C: 0.16,
  },
  {
    title: "Огурцы солёные",
    P: 0.01,
    F: 0.0,
    CR: 0.02,
    C: 0.14,
  },
  {
    title: "Оливки",
    P: 0.01,
    F: 0.17,
    CR: 0.05,
    C: 1.78,
  },
  {
    title: "Оливки зеленые без косточки",
    P: 0.01,
    F: 0.17,
    CR: 0.0,
    C: 1.57,
  },
  {
    title: "Омлет",
    P: 0.1,
    F: 0.14,
    CR: 0.03,
    C: 1.75,
  },
  {
    title: "Орех грецкий",
    P: 0.15,
    F: 0.64,
    CR: 0.11,
    C: 6.71,
  },
  {
    title: "Отруби овсяные",
    P: 0.15,
    F: 0.07,
    CR: 0.45,
    C: 3.05,
  },
  {
    title: "Отруби пшеничные очищенные",
    P: 0.13,
    F: 0.04,
    CR: 0.23,
    C: 2.14,
  },
  {
    title: "Отруби ржаные очищенные",
    P: 0.12,
    F: 0.03,
    CR: 0.09,
    C: 1.67,
  },
  {
    title: "Паприка",
    P: 0.03,
    F: 0.02,
    CR: 0.07,
    C: 1.12,
  },
  {
    title: "Патиссон",
    P: 0.01,
    F: 0.0,
    CR: 0.04,
    C: 0.19,
  },
  {
    title: "Перепелиное яйцо",
    P: 0.13,
    F: 0.13,
    CR: 0.0,
    C: 1.67,
  },
  {
    title: "Перец сладкий",
    P: 0.01,
    F: 0.0,
    CR: 0.05,
    C: 0.26,
  },
  {
    title: "Перец чили",
    P: 0.02,
    F: 0.0,
    CR: 0.09,
    C: 0.4,
  },
  {
    title: "Перловка (крупа)",
    P: 0.1,
    F: 0.01,
    CR: 0.76,
    C: 3.46,
  },
  {
    title: "Перловка отварная",
    P: 0.02,
    F: 0.0,
    CR: 0.27,
    C: 1.21,
  },
  {
    title: "Персики",
    P: 0.01,
    F: 0.01,
    CR: 0.12,
    C: 0.51,
  },
  {
    title: "Персики (сухофрукты)",
    P: 0.02,
    F: 0.0,
    CR: 0.42,
    C: 1.68,
  },
  {
    title: "Петрушка корень",
    P: 0.02,
    F: 0.0,
    CR: 0.11,
    C: 0.48,
  },
  {
    title: "Петрушка свежая",
    P: 0.03,
    F: 0.01,
    CR: 0.07,
    C: 0.38,
  },
  {
    title: 'Печенье "Юбилейное" Молочное',
    P: 0.08,
    F: 0.18,
    CR: 0.66,
    C: 4.55,
  },
  {
    title: "Печень куриная",
    P: 0.27,
    F: 0.07,
    CR: 0.01,
    C: 1.44,
  },
  {
    title: "Пиво светлое",
    P: 0.0,
    F: 0.0,
    CR: 0.04,
    C: 0.5,
  },
  {
    title: "Плавленный сыр",
    P: 0.15,
    F: 0.2,
    CR: 0.02,
    C: 2.8,
  },
  {
    title: "Помидоры консервированные",
    P: 0.01,
    F: 0.0,
    CR: 0.05,
    C: 0.23,
  },
  {
    title: "Помидоры свежие",
    P: 0.04,
    F: 0.01,
    CR: 0.03,
    C: 0.33,
  },
  {
    title: "Простокваша",
    P: 0.03,
    F: 0.03,
    CR: 0.04,
    C: 0.52,
  },
  {
    title: "Пшено",
    P: 0.11,
    F: 0.03,
    CR: 0.68,
    C: 3.37,
  },
  {
    title: "Ревень черешковый",
    P: 0.01,
    F: 0.0,
    CR: 0.04,
    C: 0.16,
  },
  {
    title: "Редис",
    P: 0.01,
    F: 0.0,
    CR: 0.04,
    C: 0.2,
  },
  {
    title: "Редька",
    P: 0.02,
    F: 0.0,
    CR: 0.07,
    C: 0.35,
  },
  {
    title: "Редька зеленая",
    P: 0.02,
    F: 0.0,
    CR: 0.07,
    C: 0.35,
  },
  {
    title: "Репа",
    P: 0.01,
    F: 0.0,
    CR: 0.05,
    C: 0.29,
  },
  {
    title: "Рис",
    P: 0.07,
    F: 0.01,
    CR: 0.75,
    C: 3.31,
  },
  {
    title: "Рис отварной",
    P: 0.04,
    F: 0.01,
    CR: 0.25,
    C: 1.34,
  },
  {
    title: "Рожки отварные",
    P: 0.03,
    F: 0.0,
    CR: 0.24,
    C: 1.15,
  },
  {
    title: "Рожки (сухой продукт)",
    P: 0.11,
    F: 0.01,
    CR: 0.72,
    C: 3.44,
  },
  {
    title: "Руккола",
    P: 0.02,
    F: 0.01,
    CR: 0.02,
    C: 0.24,
  },
  {
    title: "Рыба скумбрия",
    P: 0.16,
    F: 0.13,
    CR: 0.01,
    C: 1.87,
  },
  {
    title: "Рыба треска",
    P: 0.17,
    F: 0.01,
    CR: 0.0,
    C: 0.8,
  },
  {
    title: "Рябина черноплодная",
    P: 0.02,
    F: 0.0,
    CR: 0.12,
    C: 0.54,
  },
  {
    title: "Ряженка",
    P: 0.03,
    F: 0.03,
    CR: 0.04,
    C: 0.62,
  },
  {
    title: "Салат лист",
    P: 0.01,
    F: 0.0,
    CR: 0.02,
    C: 0.16,
  },
  {
    title: "Сахар песок",
    P: 0.0,
    F: 0.0,
    CR: 1.09,
    C: 3.96,
  },
  {
    title: "Свежая капуста",
    P: 0.02,
    F: 0.0,
    CR: 0.05,
    C: 0.25,
  },
  {
    title: "Свежий укроп",
    P: 0.03,
    F: 0.01,
    CR: 0.06,
    C: 0.38,
  },
  {
    title: "Свекла",
    P: 0.02,
    F: 0.01,
    CR: 0.12,
    C: 0.61,
  },
  {
    title: "Свекла отварная",
    P: 0.02,
    F: 0.0,
    CR: 0.1,
    C: 0.5,
  },
  {
    title: "Свинина",
    P: 0.16,
    F: 0.27,
    CR: 0.0,
    C: 3.04,
  },
  {
    title: "Сельдерей",
    P: 0.01,
    F: 0.0,
    CR: 0.03,
    C: 0.13,
  },
  {
    title: "Сельдерей стебель",
    P: 0.01,
    F: 0.0,
    CR: 0.02,
    C: 0.11,
  },
  {
    title: "Сельдь атлантическая жирная",
    P: 0.15,
    F: 0.15,
    CR: 0.0,
    C: 2.04,
  },
  {
    title: "Семена тыквы неочищенные с солью",
    P: 0.29,
    F: 0.47,
    CR: 0.13,
    C: 5.96,
  },
  {
    title: "Семечки подсолнечные",
    P: 0.26,
    F: 0.5,
    CR: 0.09,
    C: 5.83,
  },
  {
    title: "Сладкая кукуруза в початках",
    P: 0.04,
    F: 0.03,
    CR: 0.21,
    C: 1.24,
  },
  {
    title: "Слива садовая",
    P: 0.01,
    F: 0.0,
    CR: 0.1,
    C: 0.45,
  },
  {
    title: "Сливки 10%",
    P: 0.03,
    F: 0.1,
    CR: 0.04,
    C: 1.18,
  },
  {
    title: "Сливки 20%",
    P: 0.03,
    F: 0.2,
    CR: 0.04,
    C: 2.06,
  },
  {
    title: "Сливки 22%",
    P: 0.03,
    F: 0.22,
    CR: 0.04,
    C: 2.24,
  },
  {
    title: "Сливки 33%",
    P: 0.02,
    F: 0.33,
    CR: 0.04,
    C: 3.22,
  },
  {
    title: "Смесь орехов и сухофруктов экзотик",
    P: 0.08,
    F: 0.26,
    CR: 0.52,
    C: 4.66,
  },
  {
    title: "Сметана 10 %",
    P: 0.03,
    F: 0.1,
    CR: 0.04,
    C: 1.17,
  },
  {
    title: "Сметана 15%",
    P: 0.03,
    F: 0.15,
    CR: 0.04,
    C: 1.59,
  },
  {
    title: "Сметана 20%",
    P: 0.03,
    F: 0.19,
    CR: 0.06,
    C: 2.04,
  },
  {
    title: "Сметана 30 %",
    P: 0.02,
    F: 0.3,
    CR: 0.03,
    C: 2.91,
  },
  {
    title: "Смородина красная",
    P: 0.01,
    F: 0.0,
    CR: 0.08,
    C: 0.4,
  },
  {
    title: "Смородина чёрная",
    P: 0.01,
    F: 0.0,
    CR: 0.09,
    C: 0.41,
  },
  {
    title: "Соевый соус",
    P: 0.05,
    F: 0.0,
    CR: 0.22,
    C: 0.36,
  },
  {
    title: "Сок апельсиновый",
    P: 0.01,
    F: 0.0,
    CR: 0.11,
    C: 0.47,
  },
  {
    title: "Сок грейпфрутовый",
    P: 0.0,
    F: 0.0,
    CR: 0.1,
    C: 0.44,
  },
  {
    title: "Сок лайма",
    P: 0.01,
    F: 0.0,
    CR: 0.06,
    C: 0.22,
  },
  {
    title: "Сок лимона",
    P: 0.01,
    F: 0.0,
    CR: 0.03,
    C: 0.18,
  },
  {
    title: "Сок лимонный",
    P: 0.01,
    F: 0.0,
    CR: 0.05,
    C: 0.29,
  },
  {
    title: "Сок мандарина",
    P: 0.01,
    F: 0.0,
    CR: 0.1,
    C: 0.43,
  },
  {
    title: "Сок свекольный",
    P: 0.01,
    F: 0.0,
    CR: 0.14,
    C: 0.61,
  },
  {
    title: "Сок томатный",
    P: 0.0,
    F: 0.0,
    CR: 0.05,
    C: 0.21,
  },
  {
    title: "Сок яблочный",
    P: 0.0,
    F: 0.0,
    CR: 0.1,
    C: 0.44,
  },
  {
    title: "Соленый огурец",
    P: 0.01,
    F: 0.0,
    CR: 0.03,
    C: 0.14,
  },
  {
    title: "Соус соевый",
    P: 0.04,
    F: 0.0,
    CR: 0.1,
    C: 0.53,
  },
  {
    title: "Соя",
    P: 0.34,
    F: 0.12,
    CR: 0.27,
    C: 3.59,
  },
  {
    title: "Спагетти отварные",
    P: 0.07,
    F: 0.01,
    CR: 0.46,
    C: 2.23,
  },
  {
    title: "Спагетти (сухой продукт)",
    P: 0.1,
    F: 0.01,
    CR: 0.72,
    C: 3.44,
  },
  {
    title: "Сухари панировочные",
    P: 0.12,
    F: 0.02,
    CR: 0.74,
    C: 3.62,
  },
  {
    title: "Сыворотка",
    P: 0.01,
    F: 0.0,
    CR: 0.04,
    C: 0.22,
  },
  {
    title: "Сыр 45%",
    P: 0.26,
    F: 0.26,
    CR: 0.0,
    C: 3.36,
  },
  {
    title: "Сыр 50% «Сливочный»",
    P: 0.23,
    F: 0.28,
    CR: 0.0,
    C: 2.88,
  },
  {
    title: "Сыр Адыгейский",
    P: 0.18,
    F: 0.16,
    CR: 0.0,
    C: 2.24,
  },
  {
    title: "Сыр гауда",
    P: 0.24,
    F: 0.27,
    CR: 0.02,
    C: 3.5,
  },
  {
    title: "Сыр «Лёгкий»",
    P: 0.23,
    F: 0.17,
    CR: 0.0,
    C: 3.0,
  },
  {
    title: 'Сырок плавленный "Дружба"',
    P: 0.06,
    F: 0.19,
    CR: 0.0,
    C: 1.78,
  },
  {
    title: 'Сыр "российский"',
    P: 0.23,
    F: 0.29,
    CR: 0.0,
    C: 3.61,
  },
  {
    title: "Сыр твердый",
    P: 0.25,
    F: 0.27,
    CR: 0.02,
    C: 3.58,
  },
  {
    title: "Тархун",
    P: 0.0,
    F: 0.0,
    CR: 0.1,
    C: 0.41,
  },
  {
    title: "Творог 0%",
    P: 0.16,
    F: 0.0,
    CR: 0.02,
    C: 0.75,
  },
  {
    title: "Творог 1%",
    P: 0.17,
    F: 0.01,
    CR: 0.02,
    C: 0.82,
  },
  {
    title: "Творог 10%",
    P: 0.15,
    F: 0.09,
    CR: 0.02,
    C: 1.5,
  },
  {
    title: "Творог 5 %",
    P: 0.17,
    F: 0.05,
    CR: 0.02,
    C: 1.22,
  },
  {
    title: "Творог 9%",
    P: 0.16,
    F: 0.08,
    CR: 0.03,
    C: 1.53,
  },
  {
    title: "Творожная масса с цукатами",
    P: 0.07,
    F: 0.21,
    CR: 0.33,
    C: 3.49,
  },
  {
    title: "Тесто дрожжевое",
    P: 0.07,
    F: 0.04,
    CR: 0.43,
    C: 2.38,
  },
  {
    title: "Тесто слоеное дрожжевое",
    P: 0.07,
    F: 0.19,
    CR: 0.4,
    C: 3.56,
  },
  {
    title: "Тесто слоёное бездрожжевое",
    P: 0.06,
    F: 0.18,
    CR: 0.38,
    C: 3.35,
  },
  {
    title: "Томат",
    P: 0.01,
    F: 0.0,
    CR: 0.05,
    C: 0.27,
  },
  {
    title: "Томатная паста помидорка",
    P: 0.01,
    F: 0.0,
    CR: 0.15,
    C: 0.77,
  },
  {
    title: "Томатный сок",
    P: 0.01,
    F: 0.0,
    CR: 0.04,
    C: 0.25,
  },
  {
    title: "Томаты (парниковые)",
    P: 0.01,
    F: 0.0,
    CR: 0.03,
    C: 0.14,
  },
  {
    title: "Томаты черри",
    P: 0.01,
    F: 0.0,
    CR: 0.03,
    C: 0.17,
  },
  {
    title: "Треска филе",
    P: 0.17,
    F: 0.01,
    CR: 0.0,
    C: 0.78,
  },
  {
    title: "Тушенка говядина высший сорт",
    P: 0.15,
    F: 0.17,
    CR: 0.0,
    C: 2.13,
  },
  {
    title: "Тыква",
    P: 0.01,
    F: 0.0,
    CR: 0.05,
    C: 0.22,
  },
  {
    title: "Укроп",
    P: 0.03,
    F: 0.01,
    CR: 0.06,
    C: 0.38,
  },
  {
    title: "Уксус столовый 6-7%",
    P: 0.0,
    F: 0.0,
    CR: 0.06,
    C: 0.13,
  },
  {
    title: "Урюк (сухофрукты)",
    P: 0.05,
    F: 0.0,
    CR: 0.51,
    C: 2.13,
  },
  {
    title: "Фарш говяжий",
    P: 0.18,
    F: 0.16,
    CR: 0.0,
    C: 2.14,
  },
  {
    title: "Фарш куриный",
    P: 0.19,
    F: 0.1,
    CR: 0.0,
    C: 1.66,
  },
  {
    title: "Фасоль",
    P: 0.18,
    F: 0.01,
    CR: 0.44,
    C: 2.63,
  },
  {
    title: "Фасоль «Бондюэль»",
    P: 0.07,
    F: 0.0,
    CR: 0.1,
    C: 0.74,
  },
  {
    title: "Фасоль стручковая",
    P: 0.02,
    F: 0.0,
    CR: 0.04,
    C: 0.29,
  },
  {
    title: "Фасоль стручковая замороженная",
    P: 0.02,
    F: 0.0,
    CR: 0.04,
    C: 0.26,
  },
  {
    title: "Фасоль Фрау Марта",
    P: 0.06,
    F: 0.01,
    CR: 0.16,
    C: 0.92,
  },
  {
    title: 'Фасоль "Фрау Марта" в томатном соусе',
    P: 0.05,
    F: 0.0,
    CR: 0.15,
    C: 0.86,
  },
  {
    title: "Фасоль Фрау Марта Лобио",
    P: 0.05,
    F: 0.01,
    CR: 0.13,
    C: 0.8,
  },
  {
    title: "Фенхель",
    P: 0.01,
    F: 0.0,
    CR: 0.07,
    C: 0.31,
  },
  {
    title: "Филе куринное",
    P: 0.23,
    F: 0.02,
    CR: 0.0,
    C: 1.14,
  },
  {
    title: "Филе куриной грудки",
    P: 0.22,
    F: 0.02,
    CR: 0.0,
    C: 1.09,
  },
  {
    title: "Финики (сухофрукты)",
    P: 0.02,
    F: 0.0,
    CR: 0.72,
    C: 2.8,
  },
  {
    title: "Фруктоза",
    P: 0.0,
    F: 0.0,
    CR: 1.0,
    C: 3.9,
  },
  {
    title: "Фундук",
    P: 0.15,
    F: 0.62,
    CR: 0.11,
    C: 6.65,
  },
  {
    title: "Хлеб белый",
    P: 0.08,
    F: 0.03,
    CR: 0.54,
    C: 2.54,
  },
  {
    title: 'Хлеб "бородинский"',
    P: 0.07,
    F: 0.01,
    CR: 0.42,
    C: 2.1,
  },
  {
    title: "Хлеб пшеничный",
    P: 0.08,
    F: 0.03,
    CR: 0.5,
    C: 2.63,
  },
  {
    title: "Хлеб ржаной",
    P: 0.07,
    F: 0.01,
    CR: 0.36,
    C: 1.87,
  },
  {
    title: "Хлебцы пшеничные",
    P: 0.12,
    F: 0.02,
    CR: 0.6,
    C: 3.05,
  },
  {
    title: "Хлопья кукурузные",
    P: 0.07,
    F: 0.01,
    CR: 0.84,
    C: 3.73,
  },
  {
    title: "Хлопья овсяные",
    P: 0.12,
    F: 0.06,
    CR: 0.52,
    C: 3.08,
  },
  {
    title: "Хрен",
    P: 0.03,
    F: 0.05,
    CR: 0.14,
    C: 1.13,
  },
  {
    title: "Хурма",
    P: 0.01,
    F: 0.0,
    CR: 0.15,
    C: 0.65,
  },
  {
    title: "Цветная капуста отварная",
    P: 0.02,
    F: 0.0,
    CR: 0.04,
    C: 0.29,
  },
  {
    title: "Цедра апельсина",
    P: 0.01,
    F: 0.0,
    CR: 0.06,
    C: 0.36,
  },
  {
    title: "Цедра лимона",
    P: 0.01,
    F: 0.0,
    CR: 0.04,
    C: 0.28,
  },
  {
    title: "Цукаты",
    P: 0.03,
    F: 0.0,
    CR: 0.56,
    C: 2.24,
  },
  {
    title: "Цукини",
    P: 0.02,
    F: 0.0,
    CR: 0.03,
    C: 0.18,
  },
  {
    title: "Черемша",
    P: 0.02,
    F: 0.0,
    CR: 0.07,
    C: 0.37,
  },
  {
    title: "Черешня",
    P: 0.01,
    F: 0.0,
    CR: 0.12,
    C: 0.51,
  },
  {
    title: "Черника",
    P: 0.01,
    F: 0.0,
    CR: 0.09,
    C: 0.39,
  },
  {
    title: "Чернослив (сухофрукты)",
    P: 0.03,
    F: 0.0,
    CR: 0.62,
    C: 2.56,
  },
  {
    title: "Чеснок",
    P: 0.06,
    F: 0.0,
    CR: 0.23,
    C: 1.15,
  },
  {
    title: "Чечевица зелёная",
    P: 0.24,
    F: 0.02,
    CR: 0.44,
    C: 2.86,
  },
  {
    title: "Чечевица красная",
    P: 0.22,
    F: 0.01,
    CR: 0.49,
    C: 3.12,
  },
  {
    title: "Шампиньоны",
    P: 0.04,
    F: 0.01,
    CR: 0.01,
    C: 0.26,
  },
  {
    title: "Шампиньоны замороженные",
    P: 0.03,
    F: 0.0,
    CR: 0.01,
    C: 0.27,
  },
  {
    title: "Шампиньоны резанные консервированные",
    P: 0.02,
    F: 0.01,
    CR: 0.01,
    C: 0.16,
  },
  {
    title: "Шелковица",
    P: 0.01,
    F: 0.0,
    CR: 0.13,
    C: 0.52,
  },
  {
    title: "Шиповник сушёный",
    P: 0.04,
    F: 0.0,
    CR: 0.6,
    C: 2.53,
  },
  {
    title: "Шоколад горький 75%",
    P: 0.09,
    F: 0.41,
    CR: 0.39,
    C: 5.5,
  },
  {
    title: "Шоколад горький 80%",
    P: 0.12,
    F: 0.39,
    CR: 0.34,
    C: 5.27,
  },
  {
    title: "Шоколад молочный",
    P: 0.07,
    F: 0.34,
    CR: 0.52,
    C: 5.39,
  },
  {
    title: "Шпинат",
    P: 0.03,
    F: 0.0,
    CR: 0.02,
    C: 0.22,
  },
  {
    title: "Щавель",
    P: 0.02,
    F: 0.0,
    CR: 0.05,
    C: 0.25,
  },
  {
    title: "Яблоки",
    P: 0.01,
    F: 0.01,
    CR: 0.13,
    C: 0.6,
  },
  {
    title: "Яблоки сушёные (сухофрукты)",
    P: 0.03,
    F: 0.0,
    CR: 0.66,
    C: 2.69,
  },
  {
    title: "Яйца",
    P: 0.15,
    F: 0.13,
    CR: 0.01,
    C: 1.62,
  },
  { title: "Гречка", C: 3.43, P: 0.133, F: 0.033, CR: 0.715, weight: 100 },
];
exports.register = async (req, res) => {
  try {
    const {
      email,
      password,
      height,
      weight,
      gender,
      role,
      photo,
      video,
      services,
      age,
      thumbnails,
      avatar,
      about,
      userName,
      subscriptions,
      subscribers,
      events,
      eat,
      clients,
      treners,
      nikName,
      place,
      typeGym,
    } = req.body;
    const session = store.openSession();
    const existingUser = await session
      .query(User)
      .whereEquals("email", email)
      .firstOrNull();

    if (existingUser) {
      return res
        .status(400)
        .json({ error: "Такой пользователь уже существует" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = new User(
      email,
      hashedPassword,
      height,
      weight,
      gender,
      role,
      photo,
      video,
      services,
      age,
      thumbnails,
      avatar,
      about,
      userName,
      subscriptions,
      subscribers,
      events,
      eat,
      clients,
      treners,
      nikName,
      place,
      typeGym
    );

    await session.store(newUser);
    await session.saveChanges();

    // Генерация и выдача JWT токена
    const token = jwt.sign({ email }, "secret_key");
    res.status(201).json({
      token: token,
      message: "User registered successfully",

      user: {
        email,
        height,
        weight,
        gender,
        role,
        photo,
        video,
        services,
        age,
        thumbnails,
        avatar,
        about,
        userName,
        subscriptions,
        subscribers,
        events,
        eat,
        clients,
        treners,
        id: newUser.id,
        nikName,
        place,
        typeGym,
      },
    });
  } catch (error) {
    console.error("Error registering user:", error);
    res
      .status(500)
      .json({ error: "Произошла ошибка при регистрации пользователя" });
  }
};
exports.login = async (req, res) => {
  console.log("login");
  try {
    const { email, password } = req.body;
    console.log(email);
    console.log(password);
    const session = store.openSession();
    const user = await session
      .query(User)
      .whereEquals("email", email)
      .firstOrNull();

    if (!user) {
      return res.status(401).json({ error: "Неверный логин или пароль" });
    }

    const passwordMatch = await bcrypt.compare(password, user.passwordHash);
    if (!passwordMatch) {
      return res.status(407).json({ error: "Неверный логин или пароль" });
    }
    // Генерация и выдача JWT токена
    const token = jwt.sign({ email }, "secret_key");
    res.json({ token, user });
  } catch (error) {
    console.error("Error logging in:", error);
    res.status(500).json({ error: "Произошла ошибка при входе в систему" });
  }
};
exports.addService = async (req, res) => {
  try {
    const { email, service } = req.body;

    const session = store.openSession();
    const user = await session
      .query({ collection: "Users" })
      .whereEquals("email", email)
      .firstOrNull();

    if (user) {
      user.services.push(service);
      await session.saveChanges();
      res
        .status(200)
        .json({ message: `Сервис добавлен пользователю с email ${email}` });
    } else {
      res
        .status(404)
        .json({ error: `Пользователь с email ${email} не найден` });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Произошла ошибка сервера" });
  }
};
exports.updateService = async (req, res) => {
  try {
    const { email, service } = req.body;

    if (!service.id) {
      return res
        .status(400)
        .json({ error: "Не предоставлен ID услуги для обновления" });
    }

    const session = store.openSession();
    const user = await session
      .query({ collection: "Users" })
      .whereEquals("email", email)
      .firstOrNull();

    if (user) {
      const serviceIndex = user.services.findIndex((s) => s.id === service.id);

      if (serviceIndex !== -1) {
        user.services[serviceIndex] = service; // Обновляем услугу
        await session.saveChanges();
        res.status(200).json({
          message: `Сервис обновлен для пользователя с email ${email}`,
        });
      } else {
        res.status(404).json({
          error: `Услуга с ID ${service.id} не найдена для пользователя с email ${email}`,
        });
      }
    } else {
      res
        .status(404)
        .json({ error: `Пользователь с email ${email} не найден` });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Произошла ошибка сервера" });
  }
};

exports.deleteService = async (req, res) => {
  try {
    const { email, serviceId } = req.body;

    if (!serviceId) {
      return res
        .status(400)
        .json({ error: "Не предоставлен ID услуги для удаления" });
    }

    const session = store.openSession();
    const user = await session
      .query({ collection: "Users" })
      .whereEquals("email", email)
      .firstOrNull();

    if (user) {
      const serviceIndex = user.services.findIndex((s) => s.id === serviceId);

      if (serviceIndex !== -1) {
        user.services.splice(serviceIndex, 1); // Удаляем услугу
        await session.saveChanges();
        res.status(200).json({
          message: `Сервис с ID ${serviceId} удален для пользователя с email ${email}`,
        });
      } else {
        res.status(404).json({
          error: `Услуга с ID ${serviceId} не найдена для пользователя с email ${email}`,
        });
      }
    } else {
      res
        .status(404)
        .json({ error: `Пользователь с email ${email} не найден` });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Произошла ошибка сервера" });
  }
};

exports.getUser = async (req, res) => {
  try {
    const { email } = req.body;

    const session = store.openSession();
    const user = await session
      .query({ collection: "Users" })
      .whereEquals("email", email)
      .firstOrNull();

    if (user) {
      res.status(200).json(user);
    } else {
      res
        .status(404)
        .json({ error: `Пользователь с email ${email} не найден` });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Произошла ошибка сервера" });
  }
};
async function saveUser(user) {
  const session = store.openSession();
  await session.store(user);
  await session.saveChanges();
}
async function findUserByEmail(email) {
  const session = store.openSession();
  const user = await session
    .query(User)
    .whereEquals("email", email)
    .firstOrNull();
  return user;
}

async function generateVideoThumbnail(
  videoPath,
  thumbnailPath,
  thumbnailFileName
) {
  const vi = videoPath;
  const thumbnail = thumbnailPath;
  return new Promise((resolve, reject) => {
    ffmpeg(videoPath)
      .on("end", () => resolve(thumbnailPath))
      .on("error", (err) => reject(err))
      .screenshots({
        timestamps: ["00:00:01"], // Время получения обложки (1 секунда)
        filename: thumbnailFileName,
        folder: thumbnailPath,
      });
  });
}

exports.uploudFile = async (req, res) => {
  console.log(req);
  try {
    const { email, folder, type } = req.body; // Email пользователя
    const user = await findUserByEmail(email);
    console.log("user", user);
    if (user) {
      const name = req.file.originalname;
      const testName = name.split("_");
      const fileUri = path.join(folder, testName[1]);
      if (folder === "photo") {
        if (type === "video") {
          const thumbnailFileName = `${testName[1]}.jpg`;
          const thumbnailUri = path.join(folder, thumbnailFileName);
          const videoPath = req.file.path; // Путь к загруженному видео
          const thumbnailPath = path.join(__dirname, folder); // Папка для сохранения обложки
          const thumbnailFullPath = path.join(thumbnailPath, thumbnailFileName);
          try {
            await generateVideoThumbnail(
              videoPath,
              thumbnailPath,
              thumbnailFileName
            );
            user.photo.push({
              uri: path.join(folder, testName[1]),
              type: "video",
              thumbnail: thumbnailUri,
            });

            console.log(
              "Файл и обложка успешно загружены и путь сохранен в базе данных."
            );
            res.json({
              uri: path.join(folder, testName[1]),
              type: "video",
              thumbnail: thumbnailUri,
            });
          } catch (error) {
            console.error(error);
            res
              .status(500)
              .json({ error: "Ошибка при создании обложки видео." });
          }
        } else {
          user.photo.push({
            uri: path.join(folder, testName[1]),
            type: "photo",
          });
        }
      } else {
        user[folder] = path.join(folder, testName[1]);
      }

      await saveUser(user);
      res.json({
        message: "Изображение успешно загружено и путь сохранен в базе данных.",
      });
    } else {
      console.log("Пользователь не найден.");
      res.status(404).json({ error: "Пользователь не найден." });
    }
  } catch (error) {
    console.error(error);
    res
      .status(500)
      .json({ error: "Произошла ошибка при обновлении пути в базе данных." });
  }
};
exports.addAbout = async (req, res) => {
  try {
    const { email, about } = req.body;
    const user = await findUserByEmail(email);

    if (user) {
      user.about = about;
      await saveUser(user);
      res.status(200).json({ message: "информация о пользователе добавлена" });
    } else {
      res
        .status(404)
        .json({ error: `Пользователь с email ${email} не найден` });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Произошла ошибка сервера" });
  }
};
exports.changeUserName = async (req, res) => {
  try {
    const { email, userName } = req.body;
    const user = await findUserByEmail(email);
    if (user) {
      user.userName = userName;
      await saveUser(user);
      res.status(200).json({ message: "информация о пользователе добавлена" });
    } else {
      res
        .status(404)
        .json({ error: `Пользователь с email ${email} не найден` });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Произошла ошибка сервера" });
  }
};
exports.changeNikName = async (req, res) => {
  try {
    const { email, nikName } = req.body;
    const user = await findUserByEmail(email);
    if (user) {
      user.nikName = nikName;
      await saveUser(user);
      res.status(200).json({ message: "информация о пользователе добавлена" });
    } else {
      res
        .status(404)
        .json({ error: `Пользователь с email ${email} не найден` });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Произошла ошибка сервера" });
  }
};
exports.users = async (req, res) => {
  console.log("users");
  const session = store.openSession();

  try {
    let query = session.query({ collection: "Users" });

    // Проверяем, определены ли параметры фильтрации, и добавляем их в запрос
    if (req.query.typeGym !== "undefined") {
      console.log(
        "🚀 ~ file: userController.js:395 ~ exports.users= ~ req.query.typeGym:",
        req.query.typeGym
      );
      query = query.whereEquals("typeGym", req.query.typeGym);
    }
    if (req.query.gender !== "undefined") {
      query = query.whereEquals("gender", req.query.gender);
    }
    if (req.query.placeId !== "undefined") {
      query = query.whereEquals("place.id", req.query.placeId);
    }

    const users = await query.all();
    res.json(users);
  } catch (err) {
    res.status(500).json({ error: "An error occurred" });
  }
};
exports.findNearest = async (req, res) => {
  const { latitude, longitude } = req.body;
  if (!latitude || !longitude) {
    return res.status(400).send("Latitude and longitude are required.");
  }

  const myLatitude = parseFloat(latitude);
  const myLongitude = parseFloat(longitude);

  let session = store.openSession();
  try {
    let users = await session
      .query({ collection: "Users" })
      .whereExists("place")
      .all();

    let nearestUserData = null;
    let shortestDistance = Infinity;

    users.forEach((user) => {
      if (user.place && user.place.latitude && user.place.longitude) {
        let distance = calculateDistance(
          myLatitude,
          myLongitude,
          parseFloat(user.place.latitude),
          parseFloat(user.place.longitude)
        );
        if (distance < shortestDistance) {
          shortestDistance = distance;
          nearestUserData = { user, distance };
        }
      }
    });

    res.json(nearestUserData);
  } catch (e) {
    console.error(e);
    res.status(500).send("Internal Server Error");
  }
};

function calculateDistance(lat1, lon1, lat2, lon2) {
  // Функция для вычисления расстояния между двумя точками
  const R = 6371; // радиус Земли в километрах
  const dLat = degreesToRadians(lat2 - lat1);
  const dLon = degreesToRadians(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(degreesToRadians(lat1)) *
      Math.cos(degreesToRadians(lat2)) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

function degreesToRadians(degrees) {
  return degrees * (Math.PI / 180);
}

function calculateDistance(lat1, lon1, lat2, lon2) {
  // Функция для вычисления расстояния между двумя точками
  // Используем формулу гаверсинуса
  const R = 6371; // радиус Земли в километрах
  const dLat = degreesToRadians(lat2 - lat1);
  const dLon = degreesToRadians(lon2 - lon1);
  const a =
    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
    Math.cos(degreesToRadians(lat1)) *
      Math.cos(degreesToRadians(lat2)) *
      Math.sin(dLon / 2) *
      Math.sin(dLon / 2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  return R * c;
}

function degreesToRadians(degrees) {
  return degrees * (Math.PI / 180);
}
exports.searchUsers = async (req, res) => {
  const queryTerm = req.query.userName;

  if (!queryTerm) {
    return res.status(400).send("Parameter 'userName' is required.");
  }

  try {
    const session = store.openSession();
    const results = await session
      .query({ indexName: "Users_ByCertainFields" })
      .search("UserName", `*${queryTerm}*`) // Используем wildcard поиск
      .all();

    res.json(results);
  } catch (error) {
    console.error("Error fetching data:", error);
    res.status(500).send("Server error.");
  }
};
exports.getUserq = async (req, res) => {
  const { email } = req.body;
  if (!email) {
    return res.status(400).json({ message: "Не указан email." });
  }
  const session = store.openSession();
  try {
    // Выполняем запрос для получения пользователя по email
    const user = await session
      .query({ collection: "Users" })
      .whereEquals("email", email)
      .firstOrNull();

    if (user) {
      res.json(user);
    } else {
      res
        .status(404)
        .json({ message: "Пользователь с таким email не найден." });
    }
  } catch (err) {
    res.status(500).json({ message: "Ошибка при получении пользователя." });
  }
};
exports.subscribe = async (req, res) => {
  const { userId, targetUserId } = req.body;

  try {
    const session = store.openSession();
    const user = await session.load(userId);
    const targetUser = await session.load(targetUserId);
    user.subscriptions.push(targetUserId);
    targetUser.subscribers.push(userId);
    await session.saveChanges();
    res.json({ message: "Subscribed successfully" });
  } catch (error) {
    res.status(500).json({ error: "An error occurred" });
  }
};
exports.addClient = async (req, res) => {
  const { userId, targetUserId } = req.body;

  try {
    const session = store.openSession();
    const user = await session.load(userId);
    const targetUser = await session.load(targetUserId);
    user.clients.push(targetUserId);
    targetUser.treners.push(userId);
    await session.saveChanges();
    res.json({ message: "Subscribed successfully" });
  } catch (error) {
    res.status(500).json({ error: "An error occurred" });
  }
};
exports.removeClient = async (req, res) => {
  const { userId, targetUserId } = req.body;

  try {
    const session = store.openSession();
    const user = await session.load(userId);
    const targetUser = await session.load(targetUserId);
    // Удаление из списка подписок и подписчиков
    user.clients = user.clients.filter((id) => id !== targetUserId);
    targetUser.treners = targetUser.treners.filter((id) => id !== userId);
    await session.saveChanges();
    res.json({ message: "Unsubscribed successfully" });
  } catch (error) {
    res.status(500).json({ error: "An error occurred" });
  }
};
exports.unsubscribe = async (req, res) => {
  const { userId, targetUserId } = req.body;

  try {
    const session = store.openSession();
    const user = await session.load(userId);
    const targetUser = await session.load(targetUserId);

    // Удаление из списка подписок и подписчиков
    user.subscriptions = user.subscriptions.filter((id) => id !== targetUserId);
    targetUser.subscribers = targetUser.subscribers.filter(
      (id) => id !== userId
    );
    await session.saveChanges();
    res.json({ message: "Unsubscribed successfully" });
  } catch (error) {
    res.status(500).json({ error: "An error occurred" });
  }
};
exports.subscriptions = async (req, res) => {
  const { userId } = req.body;
  try {
    const session = store.openSession();
    const user = await session.load(userId);
    res.json({ subscriptions: user.subscriptions });
  } catch (error) {
    res.status(500).json({ error: "An error occurred" });
  }
};
exports.butch = async (req, res) => {
  const { userIds } = req.body;

  try {
    const session = store.openSession();

    // Подразумевается, что у вас есть индекс, индексирующий документы пользователей по Id
    const users = await session
      .query({ collection: "Users" })
      .whereIn("id", userIds)
      .selectFields(["userName", "avatar", "id", "role", "email"])
      .all();

    res.json(users);
  } catch (error) {
    res.status(500).json({ error: "An error occurred" });
  }
};
exports.butchEvents = async (req, res) => {
  const { userIds } = req.body;

  try {
    const session = store.openSession();

    // Подразумевается, что у вас есть индекс, индексирующий документы пользователей по Id
    const users = await session
      .query({ collection: "Users" })
      .whereIn("id", userIds)
      .selectFields([
        "userName",
        "avatar",
        "id",
        "role",
        "email",
        "events",
        "eat",
      ])
      .all();

    res.json(users);
  } catch (error) {
    res.status(500).json({ error: "An error occurred" });
  }
};
exports.addEvents = async (req, res) => {
  const { userId, eventDescription } = req.body;
  try {
    const session = store.openSession();
    const user = await session.load(userId);
    if (!user) {
      return res.status(404).json({ message: "Пользователь не найден" });
    }
    user.events = [...user.events, ...eventDescription];
    await session.saveChanges();
    return res.json({ message: "Объект добавлен в поле events пользователя." });
  } catch (error) {
    console.error("Произошла ошибка:", error);
    return res.status(500).json({ message: "Произошла ошибка на сервере" });
  }
};
exports.addActiveEvents = async (req, res) => {
  const { userId, eventDescription } = req.body;
  try {
    const session = store.openSession();
    const user = await session.load(userId);
    if (!user) {
      return res.status(404).json({ message: "Пользователь не найден" });
    }

    // Находим индекс объекта с таким же ID, если он есть
    const index = user.activeEvents.findIndex(
      (event) => event.id === eventDescription.id
    );

    if (index !== -1) {
      // Если объект с таким ID уже существует, то заменяем его
      user.activeEvents[index] = eventDescription;
    } else {
      // В противном случае добавляем новый объект
      user.activeEvents.push(eventDescription);
    }

    await session.saveChanges();
    return res.json({
      message: "Объект добавлен или обновлен в поле events пользователя.",
    });
  } catch (error) {
    console.error("Произошла ошибка:", error);
    return res.status(500).json({ message: "Произошла ошибка на сервере" });
  }
};
exports.removeActiveEvent = async (req, res) => {
  const { userId, eventId } = req.body;
  console.log(
    "🚀 ~ file: userController.js:608 ~ exports.removeActiveEvent= ~ eventId:",
    eventId
  );

  try {
    const session = store.openSession();
    const user = await session.load(userId);

    if (!user) {
      return res.status(404).json({ message: "Пользователь не найден" });
    }

    // Находим индекс объекта с таким же ID, если он есть
    const index = user.activeEvents.findIndex((event) => event.id === eventId);

    if (index !== -1) {
      // Если объект с таким ID найден, удаляем его
      user.activeEvents.splice(index, 1);
    } else {
      // Если объект с таким ID не найден, отправляем соответствующий ответ
      return res.status(404).json({ message: "Событие не найдено" });
    }

    await session.saveChanges();
    return res.json({
      message: "Событие удалено из списка активных событий пользователя.",
    });
  } catch (error) {
    console.error("Произошла ошибка:", error);
    return res.status(500).json({ message: "Произошла ошибка на сервере" });
  }
};
exports.addEat = async (req, res) => {
  const { userId, eat } = req.body;
  try {
    const session = store.openSession();
    const user = await session.load(userId);
    if (!user) {
      return res.status(404).json({ message: "Пользователь не найден" });
    }
    user.eat = [...user.eat, ...eat];
    await session.saveChanges();
    return res.json({ message: "Объект добавлен в поле events пользователя." });
  } catch (error) {
    console.error("Произошла ошибка:", error);
    return res.status(500).json({ message: "Произошла ошибка на сервере" });
  }
};
exports.getUserFromPlace = async (req, res) => {
  const { placeId } = req.body;

  if (isNaN(placeId)) {
    return res.status(400).send("Invalid place ID");
  }
  let session = store.openSession();
  try {
    const users = await session
      .query({ collection: "Users" })
      .whereEquals("place.id", placeId)
      .all();

    res.json(users);
  } catch (error) {
    console.error("Ошибка при запросе:", error);
    res.status(500).send("Internal Server Error");
  }
};

exports.generatePost = async (req, res) => {
  const { mess, key } = req.body;
  console.log("старт ген");
  try {
    const apiKey = key;

    const headers = {
      Authorization: `Bearer ${apiKey}`,
      "Content-Type": "application/json",
    };

    const data = {
      model: "gpt-3.5-turbo-1106",
      response_format: { type: "json_object" },
      messages: [
        {
          role: "system",
          content: `Отвечай в формате JSON вида {'response': {'food':'', 'weight':'', 'meal':'', 'callories':'','fats':'', 'proteins':'', 'carbohydrates':'', 'ingredients':'','day':'',how_to_cook:''}} весть текст должен быть на русском, используй только мой список продуктов, там указаны кбжу с рассчетом на 1 грамм ${JSON.stringify(
            products
          )}`,
        },
        {
          role: "user",
          content: mess,
        },
      ],
    };

    const response = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      data,
      { headers, timeout: 600000 }
    );
    console.log(response.data);
    res.json(response.data);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal Server Error" });
  }
};

exports.genImage = async (req, res) => {
  try {
    const { model, prompt, n, size, key } = req.body;

    const OPENAI_API_KEY = key;

    const headers = {
      "Content-Type": "application/json",
      Authorization: `Bearer ${OPENAI_API_KEY}`,
    };

    const data = {
      model,
      prompt,
      n,
      size,
    };

    const response = await axios.post(
      "https://api.openai.com/v1/images/generations",
      data,
      { headers }
    );

    res.json(response.data);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: "Internal Server Error" });
  }
};

exports.getCallories = async (req, res) => {
  const sessionId = store.openSession();
  try {
    const userId = req.body.userId;
    const user = await sessionId.load(userId);

    if (user && user.calories && user.calories.length > 0) {
      // Find the latest time value
      const latestTime = Math.max(...user.calories.map((c) => c.time));

      // Convert the latest time and current time to Date objects
      const latestDate = new Date(latestTime);
      const currentDate = new Date();

      // Check if the latest time is from the previous day
      if (
        latestDate.getDate() < currentDate.getDate() ||
        latestDate.getMonth() < currentDate.getMonth() ||
        latestDate.getFullYear() < currentDate.getFullYear()
      ) {
        // Clear the calories array
        user.calories = [];
      }
      await sessionId.saveChanges();
      res.json(user.calories);
    } else {
      res.status(404).send("User not found");
    }
  } catch (error) {
    res.status(500).send("Internal Server Error");
  }
};

exports.changeCallories = async (req, res) => {
  const sessionId = store.openSession();
  try {
    const userId = req.body.userId;
    const newCalories = req.body.newCalories;
    const user = await sessionId.load(userId);
    if (!user) {
      return res.status(404).send("User not found");
    }
    user.calories = [...user.calories, ...newCalories];
    await sessionId.saveChanges();
    res.json(user);
  } catch (error) {
    console.error(error);
    res.status(500).send("Internal Server Error");
  }
};
exports.changeDiet = async (req, res) => {
  const sessionId = store.openSession();
  try {
    const userId = req.body.userId;
    const newCalories = req.body.diet;
    const user = await sessionId.load(userId);
    if (!user) {
      return res.status(404).send("User not found");
    }
    user.diet = [...user.diet, ...newCalories];
    await sessionId.saveChanges();
    res.json(user);
  } catch (error) {
    console.error(error);
    res.status(500).send("Internal Server Error");
  }
};
exports.userUpd = async (req, res) => {
  const session = store.openSession();

  try {
    const users = await session.query({ collection: "Users" }).all();
    for (const user of users) {
      user.diet = [];
      await session.saveChanges();
    }
    res.status(200).send("Users updated successfully");
  } catch (error) {
    console.error("Error updating users:", error);
    res.status(500).send("Error updating users");
  }
};
exports.delCalories = async (req, res) => {
  const userId = req.body.userId;

  if (!userId) {
    return res.status(400).send("User ID is required");
  }

  try {
    let session = store.openSession();
    let user = await session.load(userId);

    if (user && user.calories) {
      // Find the latest time value
      let latestTime = Math.max(...user.calories.map((c) => c.time));

      // Remove items with the latest time value
      user.calories = user.calories.filter((c) => c.time !== latestTime);

      // Save the updated document
      await session.saveChanges();

      // Return the updated calories
      res.status(200).json({
        message: "Calories data updated for user " + userId,
        updatedCalories: user.calories,
      });
    } else {
      res.status(404).send("User not found");
    }
  } catch (err) {
    console.error("Error:", err);
    res.status(500).send("Internal Server Error");
  }
};
